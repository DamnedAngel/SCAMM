240116:
- Status:
	- Memory architecture defined:
		- Page 0 and 1: Fixed for program + MDOs
		- Page 2: Scamm Data Packages (SDP), always floating.
		- Page 3: Fixed. Lower addresses for SVMS controls.
		- Program and each MDO, with the exceptions below, have its data area just after code area. MDOs must go after Data Area.
		- Software sprite rendering should probably use page 1 for final drawings, thus it MUST be on page 0.
	- Zoo ready to be first used, but not used yet in SCAMM.
	- MDOs working.
		- SCAMM is a COM project
		- Screen8 an MDO (which should share memory space with Screen7, to be loaded one at a time)
		- TheTrial is the mockup of a game. It is currently starting at 0x3000 to make room for the engine in lower addresses.
		- rammapper.h, originally from Fusion-C, has been revamped:
			- Smaller;
			- Simpler;
			- Smaller data structures;
			- Supports both sdcccall(0) and sdcccall(1).
		- virtualmemory module started. Initialization, with greedy segment allocation was working, but now it crashed Screen8 MDO. Going to sleep.
	- SDPHandler:
		- [w]pSegNahdler
		- [w]SDPId

240116:
- After waking up ready to debug yesterday's crash, recompiling everything seems to solve the problem.
- Added push/pop ix in all (2 at the moment) virtualmemory routines to make them compatible with C.
- SDPHandler updated to 
		- [w]pSegNahdler
		- [w]SDPId
		- [b]mode MSB XXXXXXMM LSB
			MM Mode:
				00: Don't read SDP
				01: Read SDP
				1X: Force Re-Read
- Implemented, without tests, _activateSDP except from the SDP load part. Program executes but ends with a DI + Halt.
	- removed _activateSDP routine from source (which is NOT being used) and.... program works!
	- re-added the routine and.... IT WORKS! GO FUCKING FIGURE!

240121: 
- Working on my brand new Windows 7 dev setup! :D
- It was hard getting Git Extensions to work, but all mu fault:
	- Easiest way:
		- Configure OpenSSH (not Putty);
		- Tools, GIT GUI, Generate keys (it will altomatically save pvt key in proper place in order for SSH to find)
		- Register pub key in Github (Avatar, Settings, keys)
- Tested allocations until SegTable is full. It works.
	- It had a bug in testing table full. Instead of looking for the first address after full circle, I just loaded BC' with table size and decremented until 0.

240122:
- Had a epyphany that with some more tweaks and additions, the virtuam memory module could be turned into a full virtual memory.
	- Created the MnemoSyne-X repo on github to work on a virtual memory lib.

240123: 
- Started migrating the code from vitualmemory to MnemoSyne-X. Decided to take rammapper with it.
	- Migrating SCAMM terms to more generic and appropriate terms to the new concept. The idea is that SCAMM would not use "WAD" phylosophy anymore, but a RO pagefile instead.
	- Realized that the Segment handler in what was the SDPHandler is not appropriate, since
two SDPHandlers could end up pointing to different physical segments linked separately to the same logical segment, generating duplicity.
		- The link from the logical segment handler (former SDPHandler) to the Segment Table will now be the logical Segment Number itself. avoiding this problem.
		- Where was the SDPHandler.pSegHandler before will now be a copy of the SegmentHandler itself, allowing to direct segment switching.
		- The segment table will now be a logical segment Table, with potential to 64k entries (2 bytes each = 128k), allowing the address of up to 1Gb. This will now be in separate segments, the first implementation will be with a single segment, allowing for "only" 128Mb of usable virtual memory (up to 32 pagefiles of 256 segments each = 4Mb).

240131:
- Migrated MnemoSyne-X to an MDO. In its default configuration, the MDO starts at 0xC000 (page 3, always available).
- First implementation of _initMnemosyneX working, with:
	- conditional directive to use the primary mapper only
	- directives to define the main (when the segments will be made available) and auxiliary pages. Default: main=2, aux=1.
	